b main
call main
r
si
exit
b main

g
dashboard memory
dashboard registers
dashboard registers
dashboard memory
si
si
si
si
si
si
si
si
si
si
si
si 3
si
si
si
si
si
si
si
si
exit
continue
exit
b main
call main
r
si
si
si
dashboard memory
dashboard memory
display /x $rsi
x/s /rsi
x/s $rsi
x/s $rsp
x/16gxs $rsp
x/16gx $rsp
── Assembly ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
~
~
~
~
~
 0x0000555555555119  add+0  push   %rbp
 0x000055555555511a  add+1  mov    %rsp,%rbp
 0x000055555555511d  add+4  mov    %edi,-0x4(%rbp)
 0x0000555555555120  add+7  mov    %esi,-0x8(%rbp)
 0x0000555555555123  add+10 mov    -0x4(%rbp),%edx
─── Breakpoints ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[1] break at 0x000055555555513c in nested_functions.c:6 for main hit 1 time
─── Expressions ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
─── History ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
$$0 = {int (int, char **)} 0x112d
─── Memory ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
─── Registers ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
      rax 0x00007ffff7e10e28       rbx 0x0000000000000000           rcx 0x0000555555557e18           rdx 0x00007fffffffd038       rsi 0x0000000000000007
      rdi 0x0000000000000005       rbp 0x00007fffffffcf00           rsp 0x00007fffffffcee8            r8 0x00007ffff7e09680        r9 0x00007ffff7e0afe0
      r10 0x00007fffffffcc40       r11 0x0000000000000203           r12 0x00007fffffffd028           r13 0x0000000000000001       r14 0x00007ffff7ffd000
      r15 0x0000555555557e18       rip 0x0000555555555119        eflags [ PF IF ]                     cs 0x00000033                ss 0x0000002b
       ds 0x00000000                es 0x00000000                    fs 0x00000000                    gs 0x00000000                k0 0x0000000021000000
       k1 0x0000000000000008        k2 0x00000000fffbfaff            k3 0x00000000defbfaff            k4 0x0000000000000000        k5 0x0000000000000000
       k6 0x0000000000000000        k7 0x0000000000000000       fs_base 0x00007ffff7f6a740       gs_base 0x0000000000000000
─── Source ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
~
~
~
~
 1
 2  int add(int a, int b) { return a + b; }
 3
 4  int main([[maybe_unused]] int argc, [[maybe_unused]] char* argv[]) {
 5
!6      return add(5, 7);
─── Stack ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[0] from 0x0000555555555119 in add+0 at nested_functions.c:2
[1] from 0x000055555555514b in main+30 at nested_functions.c:6
─── Threads ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[1] id 4142612 name nested_function from 0x0000555555555119 in add+0 at nested_functions.c:2
─── Variables ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
arg a = 0, b = 0
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
>>> display /x $rsi
1: /x $rsi = 0x7
>>> x/s /rsi
A syntax error in expression, near `/rsi'.
>>> x/s $rsi
0x7:    <error: Cannot access memory at address 0x7>
>>> x/s $rsp
0x7fffffffcee8: "KQUUUU"
>>> x/16gxs $rsp
warning: Unable to display strings with size 'g', using 'b' instead.
0x7fffffffcee8: "KQUUUU"
0x7fffffffceef: ""
0x7fffffffcef0: "(\320\377\377\377\177"
0x7fffffffcef7: ""
0x7fffffffcef8: "\220\036\376\367\001"
0x7fffffffcefe: ""
0x7fffffffceff: ""
0x7fffffffcf00: "\240\317\377\377\377\177"
0x7fffffffcf07: ""
0x7fffffffcf08: "uv\302\367\377\177"
0x7fffffffcf0f: ""
0x7fffffffcf10: ""
0x7fffffffcf11: " \374\367\377\177"
0x7fffffffcf17: ""
0x7fffffffcf18: "(\320\377\377\377\177"
0x7fffffffcf1f: ""
>>> x/16gx $rsp
0x7fffffffcee8: 0x000055555555514b      0x00007fffffffd028
0x7fffffffcef8: 0x00000001f7fe1e90      0x00007fffffffcfa0
0x7fffffffcf08: 0x00007ffff7c27675      0x00007ffff7fc2000
0x7fffffffcf18: 0x00007fffffffd028      0x00000001ffffcf60
0x7fffffffcf28: 0x000055555555512d      0x0000000000000000
0x7fffffffcf38: 0x9751de1337dd92c3      0x00007fffffffd028
0x7fffffffcf48: 0x0000000000000001      0x00007ffff7ffd000
0x7fffffffcf58: 0x0000555555557e18      0x9751de1336bd92c3
>>>
dashboard expr
display /16gx $rsp
clear
exit
b main
call main
r
dashboard expr
display /16gx $rsp
si
si
si
continue
exit
exit
exit
b main
call main
r
mem /rsp 64
mem $rsp 64
dashboard -m
mem -4(%rsp) 8
mem -4($rsp) 8
dashboard -p stack
m
v
V
Help
help
help stack
dashboard stack -style limit 10
dashboard stack -style limit 0
dashboard memory watch $rsp 0x80
exit
